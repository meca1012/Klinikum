package de.klinikum.rest;

import java.io.IOException;
import java.text.ParseException;
import java.util.List;

import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.openrdf.repository.RepositoryException;

import de.klinikum.domain.Address;
import de.klinikum.domain.Patient;
import de.klinikum.exceptions.SpirontoException;
import de.klinikum.exceptions.TripleStoreException;
import de.klinikum.service.interfaces.PatientService;

/**
 * 
 * PatientRest.java Purpose: REST- Connection- Points for UI Main Task is to deliver Patientdata from SesameStore
 * 
 * @author Carsten Meiser, Andreas Schillnger, Constantin Treiber, Matthias Schwarzenbach, Ivan Tepeluk
 * @version 1.0 08/06/13
 */
@Path("/patient")
@Produces({ MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON })
@Consumes
@Stateless
public class PatientREST {
    
    @Inject
    PatientService patientService;

    /**
     * 
     * @return Returns a standard XML- Parse of an Patient.class
     * @throws ParseException
     */
    @Path("/getPatientXML")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public Patient getPatientXML() throws ParseException {

        DateTimeFormatter dtf = DateTimeFormat.forPattern("dd/MM/yyyy");
        DateTime date = dtf.parseDateTime("01/08/1985");

        Address a1 = new Address("http://spironto.de/spironto#address-gen4", "Hauptstrasse", "12", "Karlsruhe",
                "432433", "Deutschland", "081511833");
        a1.setUri("http://spironto.de/spironto#address-gen2");

        Patient p1 = new Patient();
        p1.setPatientNumber("081512321");
        p1.setAddress(a1);
        p1.setUri("http://spironto.de/spironto#patient-gen1");
        p1.setLastName("Power");
        p1.setFirstName("Max");
        p1.setDateOfBirth(date);
        return p1;
    }

    /**
     * Searches for a patient by his unique patientnumber.
     * 
     * @param patientNumber
     *            -> Consumes an StringnObject from GUI- side
     * @return Returns the found patient
     * @throws SpirontoException
     */
    @Path("/getPatientByPatientNumber/{patientNumber}")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public Patient getPatientByPatientNumber(@PathParam("patientNumber") String patientNumber) throws SpirontoException {
        try {
            return this.patientService.getPatientByPatientNumber(patientNumber);
        }
        catch (TripleStoreException e) {
            e.printStackTrace();
            throw new SpirontoException("Error getting patient: " + e);
        }
        catch (Exception e) {
            e.printStackTrace();
            throw new SpirontoException("Error getting patient: " + e.toString(), e);
        }
    }

    /**
     * 
     * @param patient
     *            -> Consumes an PatienObject from GUI- side
     * @return Response HTTP status code depending on function result Purpose: Update hole Patient Data. Function
     *         updates all notNull Field from given Object
     * @throws IOException
     * @throws RepositoryException
     * @throws SpirontoException
     */
    @POST
    @Path("/updatePatient")
    @Consumes(MediaType.APPLICATION_XML)
    public Response updatePatientRDF(Patient patient) throws IOException, RepositoryException, SpirontoException {

        try {
            if (this.patientService.updatePatientRDF(patient)) {
                return Response.status(Response.Status.OK).entity("ok").build();
            }
            return Response.status(Response.Status.NOT_MODIFIED).entity("not modified").build();
        }
        catch (TripleStoreException e) {
            e.printStackTrace();
            throw new SpirontoException("Error updating patient: " + e);
        }
        catch (Exception e) {
            e.printStackTrace();
            throw new SpirontoException("Error creating patient: " + e.toString(), e);
        }

    }

    /**
     * 
     * @param patient
     *            -> Consumes an PatienObject from GUI- side
     * @return Returns created PatientObject with URI generated by Sesame Purpose: Creates User in Sesame
     * @throws SpirontoException
     */
    @POST
    @Path("/createPatient")
    @Consumes(MediaType.APPLICATION_XML)
    public Patient createPatientRDF(Patient patient) throws SpirontoException {
        try {
            return this.patientService.createPatientRDF(patient);
        }
        catch (TripleStoreException e) {
            e.printStackTrace();
            throw new SpirontoException("Error creating patient: " + e);
        }
        catch (Exception e) {
            e.printStackTrace();
            throw new SpirontoException("Error creating patient: " + e.toString(), e);
        }

    }

    /**
     * 
     * @param patient
     *            -> Consumes an PatienObject from GUI- side
     * @return PatientObject Purpose: Searches for Patient by URI -> Mostly used for fetching data. Normally the
     *         PatientNumber is the used primarykey
     * @throws SpirontoException
     */
    @POST
    @Path("/getPatientByUri")
    @Consumes(MediaType.APPLICATION_XML)
    public Patient getPatientByUri(Patient patient) throws SpirontoException {
        try {
            return this.patientService.getPatientByUri(patient.getUri());
        }
        catch (TripleStoreException e) {
            e.printStackTrace();
            throw new SpirontoException("Error getting patient: " + e);
        }
        catch (Exception e) {
            e.printStackTrace();
            throw new SpirontoException("Error getting patient: " + e.toString(), e);
        }
    }

    /**
     * 
     * @param patient
     *            -> Consumes an PatienObject from GUI- side
     * @return -> Consumes an PatienObject or null depending on Methodresult Pupose: Searches for Patient in Sesame on
     *         given Patiendate Used Parameters in Searchmethod (searchPatientSPARQL) Firstname, Lastname, DateofBirth,
     *         PatientNumber
     * @throws SpirontoException
     */
    @POST
    @Path("/searchPatient")
    @Consumes(MediaType.APPLICATION_XML)
    public List<Patient> searchPatient(Patient patient) throws SpirontoException {
        try {
            List<Patient> p1 = this.patientService.searchPatientSPARQL(patient);
            return p1;
        }
        catch (TripleStoreException e) {
            e.printStackTrace();
            throw new SpirontoException("Error searching patient: " + e);
        }
        catch (Exception e) {
            e.printStackTrace();
            throw new SpirontoException("Error searching patient: " + e.toString(), e);
        }
    }

}
